<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.2.RELEASE</version>
        <relativePath/>
    </parent>
    <groupId>org.example</groupId>
    <artifactId>HelloWorld</artifactId>
    <version>1.0-SNAPSHOT</version>

<!--&lt;!&ndash;    如果不采取继承SpringBoot paren的依赖，则用SpringBootDependces&ndash;&gt;-->
<!--    <dependencyManagement>-->
<!--        <dependencies>-->
<!--            <dependency>-->
<!--                &lt;!&ndash; Import dependency management from Spring Boot &ndash;&gt;-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-dependencies</artifactId>-->
<!--                <version>2.2.2.RELEASE</version>-->
<!--                <type>pom</type>-->
<!--                <scope>import</scope>-->
<!--            </dependency>-->
<!--        </dependencies>-->
<!--    </dependencyManagement>-->

<!--    继承SpringBoot已经有的特性，内置默认所有依赖的版本号-->
<!--    https://tengj.github.io/2017/02/26/springboot1/-->
<!--    如果需要自定义部分依赖的版本，添加properties-->
    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>

<!--        添加Springboot的web工程依赖-->
        <dependency>
           <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


<!--  https://stackoverflow.com/questions/59193282/difference-between-junit-vintage-engine-and-junit-jupiter-engine-->
<!--        JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage，vintage engine为了Junit4过渡使用-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <!--  排除掉用于junit4的老式引擎-->
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

<!--    引入spring boot maven 插件主要使用repackage，可以在maven的生命周期package中再次使用repackage，将依赖的jar包都带入最后的jar中（fat jar）,只有该jar可执行-->
<!--    maven中的package和install仅仅是将编译文件打包，然后当如本地仓库中，并不带lib-->
<!--    https://daydaynews.cc/zh-hans/technology/281233.html-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <version>2.3.4.RELEASE</version>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <plugin>
<!--            plugin默认的goal repackage关联maven的package，执行package时默认执行repackage-->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>