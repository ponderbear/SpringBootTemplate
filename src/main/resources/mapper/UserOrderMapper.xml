<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--   注意，在sql中不要插入注释，解析xml会报错。where中，此处入参为值，#{}是接口中同名的参数名，若入参数为bean，则是抽取的个别属性名-->
<mapper namespace="com.example.mapper.UserOrderMapper">

    <!--    配置mybatis二级缓存-->
    <cache
            eviction = "FIFO"
            flushInterval="606060"
            size = "128"
            readOnly = "true"
    />

    <resultMap id = "UserOrder" type = "com.example.entity.Order">
        <id property = "orderId" column = "id"/>
        <result property = "storeName" column = "store_name"/>
        <result property = "orderTime" column = "order_time"/>
        <result property = "userId" column="user_id"/>
        <result property = "address" column = "user_address"/>
        <result property = "userName" column= "user_name"/>
    </resultMap>

    <select id="getUserOrder" resultType="com.example.entity.Order">
        select userorder.id orderId,
            store_name storeName,
            order_time orderTime,
            user_address address,
            user_id userId,
            userorder.user_name userName
        from userorder
        join user
        on userorder.user_id = user.id
        where userorder.user_id = #{user}
        and userorder.id = #{order}
    </select>

<!--    注意test里可以写两种：1、接口中@Param，2、传入的bean，直接从中抽出值，作为连接的表中的字段，不能放到标签中运算-->
<!--    otherwise使用 最后的1 = 2 ，直接排除所有记录-->
<!--    bind同样使用，storename或#{storename}为@Param或bean中，'%'+storename+'%'-->
<!--    可通过flushCach开启或关闭一级缓存-->
    <select id = "getUserAllOrder" flushCache="true" resultMap="UserOrder">
        select userorder.id as id, store_name, order_time, user_address,user_id, userorder.user_name
        from userorder
        join user
        on userorder.user_id = user.id
        where 1 = 1
        <if test = "userId != '' and userId != null ">
            and user_id = #{userId}
        </if>
        <choose>
            <when test = "address.equals('上海') ">
            <bind name="userOrderStoreAddress" value="'%'+'shine'+'%'"/>
                and store_name like #{userOrderStoreAddress}
            </when>
            <when test="address.equals('南京')">
                <bind name = "userOrderStoreAddress" value = "'%'+'nj'+'%'"/>
                and store_name like #{userOrderStoreAddress}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <select id="getPartialUserOrder" resultMap="UserOrder">
        select userorder.id as id, store_name, order_time, user_address,user_id, userorder.user_name
        from userorder
        join user
        on userorder.user_id = user.id
        where user_id in
        <foreach collection = "userIds" open = "(" close=")" separator = "," item = "userId" index = "i">
            #{userId}
        </foreach>
    </select>


    <select id="getUserAssociatedOrder" resultType="com.example.entity.Order">
        select userorder.id orderId,
            store_name storeName,
            order_time orderTime,
            user_address address,
            user_id userId,
            userorder.user_name userName
        from userorder
        join user
        on userorder.user_id = user.id
        where userorder.user_id = #{userId}
    </select>

    <select id="getAllOrder" resultMap = "UserOrder">

    </select>
</mapper>